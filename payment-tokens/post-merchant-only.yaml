openapi: 3.1.0
info:
  title: RESTful API Endpoints
  version: 1.0.0
servers:
  - url: https://api.ccbill.com
    description: Production Server
tags:
  - name: /payment-tokens
    description: Use the `/payment-tokens` resource to create a token that identifies a user in the system. The token can be passed on to the system in a transaction request, thus enabling you to bill a customer.
security:
  - bearerAuth: []
paths:
  /payment-tokens/merchant-only:
    post:
      tags:
        - /payment-tokens
      summary: Create a Payment Token (without providing a CVV for verification)
      description: |-
        This endpoint is used for creating a Payment Token. Tokenization turns the customer's payment details, like a credit card number,
         into a unique randomly generated set of characters called a token. The token can then be used to make payments without re-entering or referencing the credit card number. 
         In the context of the CCBill RESTful API, the Payment Token identifies a billable entity within the system.
      x-codeSamples:
        - lang: bash
          label: cURL
          source: |
            curl -X POST "https://api.ccbill.com/payment-tokens/merchant-only" \
             -H "accept: application/vnd.mcn.transaction-service.api.v.2+json"\
             -H "authorization: Bearer [access_token]"\
             -H "content-type: application/json" \
             -d '{"clientAccnum":900000,"clientSubacc":2,"customerInfo":{"value":{"customerFname":"Tyler","customerLname":"Thomas","address1":"Woodland Drive","address2":"Apt 21","city":"Tempe","state":"AZ","zipcode":"85281","country":"US","phoneNumber":"5555555555","email":"tthomas@xyz.com","ipAddress":"10.70.60.14","browserHttpUserAgent":"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0","browserHttpAccept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","browserHttpAcceptLanguage":"en-US,en;q=0.5","browserHttpAcceptEncoding":"gzip, deflate, br"}},"paymentInfo":{"creditCardPaymentInfo":{"value":{"cardNum":"4473707989493598","nameOnCard":"Tyler Thomas","expMonth":"04","expYear":"2026"}}},"subscriptionId":900000000000000000,"timeToLive":30,"validNumberOfUse":3}' \
        - lang: javascript
          label: JavaScript
          source: |
            var data = JSON.stringify({
              "clientAccnum": 900000,
              "clientSubacc": 0,
              "customerInfo": {
                "customerFname": "Tyler",
                "customerLname": "Thomas",
                "address1": "Woodland Drive",
                "address2": "Apt 21",
                "city": "Tempe",
                "state": "AZ",
                "zipcode": "85281",
                "country": "US",
                "phoneNumber": "5555555555",
                "email": "tthomas@xyz.com",
                "ipAddress": "10.70.60.14",
                "browserHttpUserAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0",
                "browserHttpAccept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                "browserHttpAcceptLanguage": "en-US,en;q=0.5",
                "browserHttpAcceptEncoding": "gzip, deflate, br"
                },
              "paymentInfo": {
                "creditCardPaymentInfo": {
                  "cardNum": "4473707989493598",
                  "nameOnCard": "Tyler Thomas",
                  "expMonth": "04",
                  "expYear": "2026"
                }
              },
            "subscriptionId": 900000000000000000,
            "timeToLive": 30,
            "validNumberOfUse": 3
            });
            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;
            xhr.addEventListener("readystatechange", function () {
            if (this.readyState === 4) {
              console.log(this.responseText);
            }
            });
            xhr.open("POST", "https://api.ccbill.com/payment-tokens/merchant-only");
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.setRequestHeader("Authorization", "Bearer [access_token]");
            xhr.setRequestHeader("Cache-Control", "no-cache");
            xhr.setRequestHeader("Accept", "application/vnd.mcn.transaction-service.api.v.2+json");
            xhr.send(data);
        - lang: php
          label: PHP
          source: |
            <?php
            $request = new HttpRequest();
            $request->setUrl('https://api.ccbill.com/payment-tokens/merchant-only');
            $request->setMethod(HTTP_METH_POST);
            $request->setHeaders(array(
              'Cache-Control' => 'no-cache',
              'Authorization' => 'Bearer [access_token]',
              'Content-Type' => 'application/json',
              'Accept' => 'application/vnd.mcn.transaction-service.api.v.2+json'
            ));
            $request->setBody('{ "clientAccnum": 900000, "clientSubacc": 0, "customerInfo": { "customerFname": "Tyler", "customerLname": "Thomas", "address1": "Woodland Drive", "address2": "Apt 21", "city": "Tempe", "state": "AZ", "zipcode": "85281", "country": "US", "phoneNumber": "5555555555", "email": "tthomas@xyz.com", "ipAddress": "10.70.60.14", "browserHttpUserAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0", "browserHttpAccept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "browserHttpAcceptLanguage": "en-US,en;q=0.5", "browserHttpAcceptEncoding": "gzip, deflate, br" }, "paymentInfo": { "creditCardPaymentInfo": { "cardNum": "4473707989493598", "nameOnCard": "Tyler Thomas", "expMonth": "04", "expYear": "2026" } }, "subscriptionId":900000000000000001, "timeToLive": 30, "validNumberOfUse": 3 }');
            try {
              $response = $request->send();
              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
            ?>
      requestBody:
        required: true
        description: Holds all the information necessary for the creation of a Payment Token (client accnum, client subacc, payment info, customer info etc.) without performing validation of the provided credit card details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTokenMerchantOnlyParams'
            examples:
              Single use Payment Token creation (without providing CVV):
                description: Request body for creating a payment token that can be charged only once
                value:
                  {
                    "clientAccnum": 900684,
                    "clientSubacc": 0,
                    "subscriptionId": 0,
                    "customerInfo": {
                      "customerFname": "Tyler",
                      "customerLname": "Thomas",
                      "address1": "Woodland Drive",
                      "address2": "Apt 21",
                      "city": "Tempe",
                      "state": "AZ",
                      "zipcode": "85281",
                      "country": "US",
                      "phoneNumber": "5555555555",
                      "email": "tthomas@xyz.com",
                      "ipAddress": "10.70.60.14'",
                      "browserHttpUserAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0",
                      "browserHttpAccept": "application/json",
                      "browserHttpAcceptLanguage": "en-US",
                      "browserHttpAcceptEncoding": "gzip"
                    },
                    "paymentInfo": {
                      "creditCardPaymentInfo": {
                        "cardNum": "4473707989493598",
                        "nameOnCard": "Tyler Thomas",
                        "expMonth": "04",
                        "expYear": "2019"
                      }
                    },
                    "validNumberOfUse": 1
                  }
              24 hours valid Payment Token creation (without providing CVV):
                description: Request body for creating a payment token that is valid for 24 hours
                value:
                  {
                    "clientAccnum": 900684,
                    "clientSubacc": 0,
                    "subscriptionId": 0,
                    "customerInfo": {
                      "customerFname": "Tyler",
                      "customerLname": "Thomas",
                      "address1": "Woodland Drive",
                      "address2": "Apt 21",
                      "city": "Tempe",
                      "state": "AZ",
                      "zipcode": "85281",
                      "country": "US",
                      "phoneNumber": "5555555555",
                      "email": "tthomas@xyz.com",
                      "ipAddress": "10.70.60.14'",
                      "browserHttpUserAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0",
                      "browserHttpAccept": "application/json",
                      "browserHttpAcceptLanguage": "en-US",
                      "browserHttpAcceptEncoding": "gzip"
                    },
                    "paymentInfo": {
                      "creditCardPaymentInfo": {
                        "cardNum": "4473707989493598",
                        "nameOnCard": "Tyler Thomas",
                        "expMonth": "04",
                        "expYear": "2019"
                      }
                    },
                    "timeToLive": 24
                  }
              Payment Token creation using previous subscription:
                description: Request body for creating a payment token by providing an ID of one of the existing subscriptions
                value:
                  {
                    "clientAccnum": 900684,
                    "clientSubacc": 0,
                    "subscriptionId": 924366201000000000
                  }
      parameters:
        - name: Widget-Version
          in: header
          schema:
            default: Unversioned
            example: 1.11.0
            type: string
          description: Version of the MCN Widget making the call
      responses:
        '200':
          description: Successful Response
          content:
            application/vnd.mcn.transaction-service.api.v.2+json:
              schema:
                $ref: '#/components/schemas/PaymentTokenV2'
              examples:
                Single use Payment Token response:
                  description: Payment token that can be charged only once
                  value:              
                    paymentTokenId: "019f5576d7f046c3a375e8a054f2c033"
                    programParticipationId: null
                    originalPaymentTokenId: null
                    clientAccnum: 900684
                    clientSubacc: 0
                    createdDatetime: "2024-11-08T12:22:51"
                    timeToLive: 2147483647
                    validNumberOfUse: 1
                    subscriptionId: "924313501000000101"
                    paymentInfoId: null
                24 hour Payment Token response:
                  description: Payment Token that is valid for 24 hours
                  value:              
                    paymentTokenId: "019f5576d7f046c3a375e8a054f2c033"
                    programParticipationId: null
                    originalPaymentTokenId: null
                    clientAccnum: 900684
                    clientSubacc: 0
                    createdDatetime: "2024-11-08T12:22:51"
                    timeToLive: 24
                    validNumberOfUse: 2147483647
                    subscriptionId: "924313501000000101"
                    paymentInfoId: null
            application/vnd.mcn.transaction-service.api.v.1+json:  
              schema:
                $ref: '#/components/schemas/PaymentToken'
              examples:
                Single use Payment Token response:
                  description: Payment token that can be charged only once
                  value:              
                    paymentTokenId: "019f5576d7f046c3a375e8a054f2c033"
                    programParticipationId: null
                    originalPaymentTokenId: null
                    clientAccnum: 900684
                    clientSubacc: 0
                    createdDatetime: "2024-11-08T12:22:51"
                    timeToLive: 2147483647
                    validNumberOfUse: 1
                    subscriptionId: 924313501000000101
                    paymentInfoId: null
                24 hour Payment Token response:
                  description: Payment Token that is valid for 24 hours
                  value:
                    paymentTokenId: "019f5576d7f046c3a375e8a054f2c033"
                    programParticipationId: null
                    originalPaymentTokenId: null
                    clientAccnum: 900684
                    clientSubacc: 0
                    createdDatetime: "2024-11-08T12:22:51"
                    timeToLive: 24
                    validNumberOfUse: 2147483647
                    subscriptionId: 924313501000000101
                    paymentInfoId: null
        '400':
          description: Bad Request. The response failed to complete due to an invalid header, query or request body parameter. This response does not differ between versions.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Bad Request:
                  description: |- 
                    Returned when one of `requestBody`'s fields is not valid.<br>
                    <em>Note</em>: For completeness the `errors` array in this example holds errors for all existing validated fields, but any subset of these can be returned.
	
                  value:
                    {
                      "id": "a90a6a04-da1a-4b58-a78d-f55e1bc09efd",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [
                        {
                          "field": "clientAccnum",
                          "message": "Attribute required"
                        },
                        {
                          "field": "clientAccnum",
                          "message": "Problem with attribute size"
                        },
                        {
                          "field": "clientSubacc",
                          "message": "Attribute required"
                        },
                        {
                          "field": "clientSubacc",
                          "message": "Problem with attribute size"
                        },
                        {
                          "field": "subscriptionId",
                          "message": "Attribute required"
                        },
                        {
                          "field": "customerInfo.customerFname",
                          "message": "Attribute required"
                        },
                        {
                          "field": "customerInfo.customerLname",
                          "message": "Attribute required"
                        },
                        {
                          "field": "customerInfo.email",
                          "message": "Attribute required"
                        },
                        {
                          "field": "customerInfo.email",
                          "message": "Invalid email address"
                        },
                        {
                          "field": "customerInfo.country",
                          "message": "Attribute required"
                        },
                        {
                          "field": "customerInfo.country",
                          "message": "Invalid postal code"
                        },
                        {
                          "field": "customerInfo.zipcode",
                          "message": "Invalid postal code"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo",
                          "message": "Attribute required"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.cardNum",
                          "message": "Attribute required"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.cardNum",
                          "message": "Invalid credit card number"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.expMonth",
                          "message": "Attribute required"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.expMonth",
                          "message": "Problem with the attribute values"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.expYear",
                          "message": "Attribute required"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.expYear",
                          "message": "Problem with the attribute values"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.expYear",
                          "message": "Invalid expiration year"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.nameOnCard",
                          "message": "Attribute required"
                        },
                        {
                          "field": "paymentInfo.creditCardPaymentInfo.nameOnCard",
                          "message": "Problem with the attribute values"
                        }
                      ],
                      "generalMessage": "Validation failed!",
                      "errorCode": 200000,
                      "timestamp": "2024-12-31T07:37:34.748Z"
                    }
                Customer and Payment information required:
                  description: Returned when either `customerInfo` or `paymentInfo` fields are not provided and `subscriptionId` field is `0`.
                  value:
                    {
                      "id": "a90a6a04-da1a-4b58-a78d-f55e1bc09efd",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [
                        {
                          "field": null,
                          "message": "Customer and Payment Information required for zero Subscription ID"
                        }
                      ],
                      "generalMessage": "Validation failed!",
                      "errorCode": 200000,
                      "timestamp": "2024-12-31T07:37:34.748Z"
                    }
                Invalid subscription ID:
                  description: Returned when subscription with the provided `subscriptionId` is not found, inactive, not properly formated or does not belong to the provided merchant.
                  value:
                    {
                      "id": "62432dd8-97d9-400a-8da8-4a5c1951f935",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [
                        {
                          "field": "subscriptionId",
                          "message": "Invalid Subscription ID"
                        }
                      ],
                      "generalMessage": "Validation failed!",
                      "errorCode": 200000,
                      "timestamp": "2025-01-02T07:27:45.734Z"
                    }
                Unsupported characters:
                  description: Returned when provided customer first/last name, address and/or name on card contain invalid characters (only ASCII character set is allowed).
                  value:
                    {
                      "id": "9343a797-bcb2-4f27-bb8d-931b5e57cb3c",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [
                        {
                          "field": null,
                          "message": "Unsupported characters"
                        }
                      ],
                      "generalMessage": "Validation failed!",
                      "errorCode": 200000,
                      "timestamp": "2025-01-12T07:27:45.734Z"
                    }

        '401':
          description: Unauthorized. Returned when the caller is not authorized to perform the requested action. This response does not have a response body.
        '403':
          description: Forbidden. Returned when the caller does not have adequate permissions to access the requested resource.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Forbidden:
                 value:
                  {
                    "id": "89e8a24a-e1b3-4366-a968-20d21b1023f3",
                    "url": "/payment-tokens/merchant-only",
                    "errors": [],
                    "generalMessage": "Forbidden",
                    "errorCode": 100020,
                    "timestamp": "2024-12-30T09:10:16.615Z"
                  }
        '404':
          description: Not Found. Returned when the requested resource or any of the required related resources is not found.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Found:
                  value:
                    {
                      "id": "98efcc51-51aa-4989-bd35-88041489c8d1",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [],
                      "generalMessage": "Not Found",
                      "errorCode": 130000,
                      "timestamp": "2024-12-27T15:06:01.190Z"
                    }

        '405':
          description: Method Not Allowed. Returned when the requested method is not allowed for the requested resource.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Method Not Allowed:
                  value:
                    {
                      "id": "399f8978-e8f0-48f9-bedc-e1725534cc6b",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [],
                      "generalMessage": "Method Not Allowed",
                      "errorCode": 130000,
                      "timestamp": "2024-12-30T09:21:25.724Z"
                    }
        '406':
          description: Not Acceptable. Returned when the requested media type is not supported.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Acceptable:
                  value:
                    {
                      "id": "4dfa73a9-9fd0-4995-9e00-4984464c3f91",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [],
                      "generalMessage": "Not Acceptable",
                      "errorCode": 100015,
                      "timestamp": "2024-12-30T09:45:11.962Z"
                    }
        '415':
          description: Unsupported Media Type. Returned when the requested media type is not supported.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unsupported Media Type:
                  value:
                    {
                      "id": "ac10e72b-0124-481c-a7f8-44875352cf87",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [],
                      "generalMessage": "Unsupported Media Type",
                      "errorCode": 100004,
                      "timestamp": "2024-12-30T19:39:18.861Z"
                    }
        '500':
          description: Internal Server Error. Returned when the server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/vnd.com.cwie.error.v1+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Internal Server Error:
                  value:
                    {
                      "id": "f82d6175-c992-4342-8271-7a181d031415",
                      "url": "/payment-tokens/merchant-only",
                      "errors": [],
                      "generalMessage": "An error occurred, please try again later.",
                      "errorCode": 100100,
                      "timestamp": "2024-12-30T13:50:51.218Z"
                    }

components:
  schemas:
    CreditCardPaymentInfo:
      description: Elements of the `paymentInfo` array.
      type: object
      properties:
        cardNum:
          description: Card number
          type: string
        expMonth:
          description: Card expiration month in `mm` format
          type: string
          pattern: ^(0[1-9]|1[012])$
        expYear:
          description: Card expiration year in `yyyy` format
          type: string
          pattern: \d{4}
        nameOnCard:
          description: Name as it appears on card
          type: string
          pattern: ^[\p{L} .'-]+$
      required:
        - cardNum
        - expMonth
        - expYear
        - nameOnCard
    CustomerInfo:
      type: object
      properties:
        customerFname:
          description: Customer's first name
          type: string
          example: "John"
        customerLname:
          description: Customer's last name
          type: string
          example: "Doe"
        email:
          description: Customer's email address
          type: string
          format: email
          example: "johndoe@example.com"
        address1:
          description: Customer's address
          type: string
          example: "123 Main St"
          nullable: true
        address2:
          description: Customer's address (additional info)
          type: string
          example: "Apt 21"
          nullable: true
        city:
          description: Customer's city
          type: string
          example: "Tempe"
          nullable: true
        zipcode:
          description: Customer's zip code. Validation depends on the provided country.
          type: string
          example: "85281"
        state:
          description: Customer's state
          type: string
          example: "AZ"
          nullable: true
        country:
          description: Customer's country
          type: string
          example: "US"
        phoneNumber:
          description: Customer's phone number
          type: string
          example: "(480) 784-4472"
          nullable: true
        ipAddress:
          description: Customer's IP address
          type: string
          example: "127.0.0.1"
          nullable: true
        browserHttpAccept:
          description: Media type(s) that is(/are) acceptable for the response
          type: string
          nullable: true
          example: "application/*"
        browserHttpAcceptEncoding:
          description: List of acceptable encodings
          type: string
          nullable: true
          example: "gzip"
        browserHttpAcceptLanguage:
          description: List of acceptable human languages for response
          type: string
          nullable: true
          example: "en-US"
        browserHttpUserAgent:
          description: The user agent string of the user agent
          type: string
          nullable: true
          example: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
      required:
        - country
        - customerFname
        - customerLname
        - email
        - zipcode
    PassThroughInfo:
      description: Elements of the `passThroughInfo` array represent custom paired information passed through to the transaction service.
      type: object
      properties:
        name:
          description: Custom passthrough value.
          type: string
        value:
          description: Custom passthrough value.
          type: string
      required:
        - name
        - value
      example:
        name: "value1"
        value: "value2"
    PaymentInfo:
      description: Payment information on the customer's payment card. Elements of the `creditCardPaymentInfo` array.
      type: object
      properties:
        creditCardPaymentInfo:
          description: Credit Card Payment Information
          allOf:
            - $ref: '#/components/schemas/CreditCardPaymentInfo'
    PaymentToken:
      description: These response parameters are received when a payment token is successfully created.
      type: object
      properties:
        paymentTokenId:
          description: Complex representation of the Payment Token Id
          type: string
        programParticipationId:
          description: Program connected to the Payment Token
          type: integer
          format: int32
          nullable: true
        originalPaymentTokenId:
          description: Reference to a previous Token Id
          type: string
          nullable: true
        clientAccnum:
          description: Merchant account number
          type: integer
          format: int32
        clientSubacc:
          description: Merchant subaccount number
          type: integer
          format: int32
        createdDatetime:
          description: Date Time of creation of the Payment Token
          type: string
        timeToLive:
          description: Time for the token to exist
          type: integer
          format: int64
        validNumberOfUse:
          description: Total number of times the Payment Token can be used for purchases
          type: integer
          format: int64
        paymentInfoId:
          description: Information associated with the payment
          type: string
          nullable: true
        subscriptionId:
          description: Identification of the subscription associated with the transaction
          type: integer
          format: int64
    PaymentTokenV2:
      description: These response parameters are received when a payment token is successfully created.
      type: object
      properties:
        paymentTokenId:
          description: Complex representation of the Payment Token Id
          type: string
        programParticipationId:
          description: Program connected to the Payment Token
          type: integer
          format: int32
          nullable: true
        originalPaymentTokenId:
          description: Reference to a previous Token Id
          type: string
          nullable: true
        clientAccnum:
          description: Merchant account number
          type: integer
          format: int32
        clientSubacc:
          description: Merchant subaccount number
          type: integer
          format: int32
        createdDatetime:
          description: Date Time of creation of the Payment Token
          type: string
        timeToLive:
          description: Time for the token to exist
          type: integer
          format: int64
        validNumberOfUse:
          description: Total number of times the Payment Token can be used for purchases
          type: integer
          format: int64
        paymentInfoId:
          description: Information associated with the payment
          type: string
          nullable: true
        subscriptionId:
          description: Identification of the subscription associated with the transaction
          type: string
    PaymentTokenMerchantOnlyParams:
      description: |-
        Parameters for creating a payment token without CVV2 and AVS authentication. 
        `paymentInfo` and `customerInfo` fields are conditionally required, in case `subscriptionId` is `0`, or optional when it's not `0` and Charge by Previous is performed.
      type: object
      properties:
        clientAccnum:
          description: Merchant account number
          type: integer
          format: int64
          minimum: 0
          maximum: 999999
        clientSubacc:
          description: Merchant subaccount number
          type: integer
          format: int32
          minimum: 0
          maximum: 9999
        customerInfo:
          description: Holds all the information related to the customer performing the transaction (name, email, address, browser info etc.).
          allOf:
            - $ref: '#/components/schemas/CustomerInfo'
        paymentInfo:
          description: Payment Information
          allOf:
            - $ref: '#/components/schemas/PaymentInfo'
        subscriptionId:
          description: |-
            Identification of the subscription associated with the transaction. 
            If the value is `0`, the `customerInfo` and `paymentInfo` fields are required.
            When the subscription ID of an existing transaction is provided, stored COF will be used to create the Payment Token.
          type: integer
          format: int64
        timeToLive:
          description: Time for the token to exist
          type: integer
          format: int64
        validNumberOfUse:
          description: Total number of times the Payment Token can be used for purchases
          type: integer
          format: int64
      required:
        - clientAccnum
        - clientSubacc
        - subscriptionId	
    ValidationError:
      type: object
      properties:
        field:
          description: Field in error
          type: string
        message:
          description: User friendly message
          type: string
      required:
        - field
        - message
      example:
        field: string
        message: string
    Error:
      type: object
      properties:
        id:
          pattern: ^[a-zA-Z0-9-]*$
          description: The unique ID used to locate an error in the logs.
          type: string
          format: uuid
        errorCode:
          pattern: ^[0-9]*$
          description: Product defined error code.
          type: integer
          format: int32
        generalMessage:
          description: The general user message.
          type: string
          nullable: true
        url:
          description: The requested relative URL that has caused this error response.
          type: string
          format: uri-reference
        timestamp:
          description: The timestamp of the request that resulted in this error response.
          type: string
          format: date-time
        errors:
          description: List of validation errors, which resulted in this error response.
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
  parameters:
    trait_versioned_Accept:
      name: '200'
      in: header
      description: API version
      schema:
        type: string
  requestBodies: {}
  headers: {}
  links: {}
  callbacks: {}